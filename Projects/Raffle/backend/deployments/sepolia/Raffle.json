{
  "address": "0x48F2626d8FB1178FFF3644C4BecD599bfC453094",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughETHEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x68c1a523e2d82331faada0d1a978b89f8da8f8f73963c931b491c6d1e1eb18af",
  "receipt": {
    "to": null,
    "from": "0x18f6D5C9b2eF0105250cf5173f46b1d472934885",
    "contractAddress": "0x48F2626d8FB1178FFF3644C4BecD599bfC453094",
    "transactionIndex": 23,
    "gasUsed": "1211604",
    "logsBloom": "0x
    "blockHash": "0xd7ed91309d7c0c6ec566539f30b0ab25842cc3fe8a23da9ef548d25ec9090879",
    "transactionHash": "0x68c1a523e2d82331faada0d1a978b89f8da8f8f73963c931b491c6d1e1eb18af",
    "logs": [],
    "blockNumber": 6145355,
    "cumulativeGasUsed": "9287960",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9ddfaca8183c41ad55329bdeed9f6a8d53168b1b",
    "10000000000000000",
    "0x787d74caea10b2b357790d5b5247c2f63d1d91572a9846f780606e4d953677ae",
    "66845934560283432536180671947727435581582947144976014058069151677014042118510",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "4ec7b43e441a7a2129361faf75526d4f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"itsskofficial\",\"details\":\"This contract uses the Chainlink VRF for random number generation.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A raffle contract that allows players to enter by paying a fee, and then picks a winner randomly.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract relies on the Chainlink VRF Coordinator to get random numbers.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xf504b227c442cd4ed31b336b7bd15cfcb23220c84c26e750975c7e7d959125aa\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x5a502a5ce16796565815b295bb2d18a0d26d6f23621f733918c971047c6091d7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x619d9d975540d65ef8d6332a67cbd0dda5b0f95b120b8da56695ed50c2f9fc30\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12 <0.9.0;\\r\\n\\r\\nimport {VRFConsumerBaseV2} from \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\r\\nimport {VRFCoordinatorV2Interface} from \\\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport {AutomationCompatibleInterface} from \\\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\\\";\\r\\n\\r\\nerror Raffle__NotEnoughETHEntered();\\r\\nerror Raffle__TransferFailed();\\r\\nerror Raffle__NotOpen();\\r\\nerror Raffle__UpkeepNotNeeded(uint256 balance, uint256 numPlayers, uint256 raffleState);\\r\\n\\r\\n\\r\\n/**\\r\\n * @title A raffle contract that allows players to enter by paying a fee, and then picks a winner randomly.\\r\\n * @author itsskofficial\\r\\n * @notice This contract relies on the Chainlink VRF Coordinator to get random numbers.\\r\\n * @dev This contract uses the Chainlink VRF for random number generation.\\r\\n*/\\r\\n\\r\\ncontract Raffle is VRFConsumerBaseV2, AutomationCompatibleInterface {\\r\\n    /* Types */\\r\\n    enum RaffleState { OPEN, CALCULATING }\\r\\n\\r\\n    /* State Variables */\\r\\n    uint256 private immutable i_entraceFee;\\r\\n    address payable[] private s_players;\\r\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\r\\n    bytes32 private immutable i_gasLane;\\r\\n    uint64 private immutable i_subscriptionId;\\r\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\r\\n    uint32 private immutable i_callbackGasLimit;\\r\\n    uint32 private constant NUM_WORDS = 1;\\r\\n    address private s_recentWinner;\\r\\n    RaffleState private s_raffleState;\\r\\n    uint256 private s_lastTimeStamp;\\r\\n    uint256 private immutable i_interval;\\r\\n\\r\\n    /* Events */\\r\\n    event RaffleEnter(address indexed player);\\r\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\r\\n    event WinnerPicked(address indexed winner);\\r\\n\\r\\n    /* Constructor */\\r\\n    constructor(\\r\\n        address vrfCoordinator,\\r\\n        uint256 interval, \\r\\n        bytes32 gasLane, \\r\\n        uint256 entranceFee, \\r\\n        uint64 subscriptionId, \\r\\n        uint32 callbackGasLimit) VRFConsumerBaseV2(vrfCoordinator) {\\r\\n        i_subscriptionId = subscriptionId;\\r\\n        i_entraceFee = entranceFee;\\r\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinator);\\r\\n        i_gasLane = gasLane;\\r\\n        i_callbackGasLimit = callbackGasLimit;\\r\\n        s_raffleState = RaffleState.OPEN;\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        i_interval = interval;\\r\\n    }\\r\\n\\r\\n    /* Functions */\\r\\n    function enterRaffle() public payable {\\r\\n        if (msg.value < i_entraceFee) {\\r\\n            revert Raffle__NotEnoughETHEntered();\\r\\n        }\\r\\n\\r\\n        if (s_raffleState != RaffleState.OPEN) {\\r\\n            revert Raffle__NotOpen();\\r\\n        }\\r\\n\\r\\n        s_players.push(payable(msg.sender));\\r\\n        emit RaffleEnter(msg.sender);\\r\\n    }\\r\\n\\r\\n    function checkUpkeep(bytes memory) public override returns (bool upkeepNeeded, bytes memory) {\\r\\n        bool isOpen = (RaffleState.OPEN == s_raffleState);\\r\\n        bool timePassed = (block.timestamp - s_lastTimeStamp) > i_interval;\\r\\n        bool hasPlayers = (s_players.length > 0);\\r\\n        bool hasBalance = address(this).balance > 0;\\r\\n\\r\\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\r\\n    }\\r\\n\\r\\n\\r\\n    function performUpkeep(bytes calldata) external override {\\r\\n        (bool upKeepNeeded, ) = checkUpkeep(\\\"\\\");\\r\\n\\r\\n        if (!upKeepNeeded) {\\r\\n            revert Raffle__UpkeepNotNeeded(address(this).balance, s_players.length, uint256(s_raffleState));\\r\\n        }\\r\\n\\r\\n        s_raffleState = RaffleState.CALCULATING;\\r\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\r\\n            i_gasLane,\\r\\n            i_subscriptionId,\\r\\n            REQUEST_CONFIRMATIONS,\\r\\n            i_callbackGasLimit,\\r\\n            NUM_WORDS\\r\\n        );\\r\\n\\r\\n        emit RequestedRaffleWinner(requestId);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(uint256, uint256[] memory randomWords) internal override {\\r\\n        uint256 winnerIndex = randomWords[0] % s_players.length;\\r\\n        address recentWinner = s_players[winnerIndex];\\r\\n        s_recentWinner = recentWinner;\\r\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\r\\n\\r\\n        if (!success) {\\r\\n            revert Raffle__TransferFailed();\\r\\n        }\\r\\n\\r\\n        s_players = new address payable[](0);\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        s_raffleState = RaffleState.OPEN;\\r\\n        emit WinnerPicked(s_recentWinner);\\r\\n    }\\r\\n\\r\\n    /* Getters */\\r\\n    function getEntranceFee() public view returns (uint256) {\\r\\n        return i_entraceFee;\\r\\n    }\\r\\n\\r\\n    function getPlayer(uint256 index) public view returns (address) {\\r\\n        return s_players[index];\\r\\n    }\\r\\n\\r\\n    function getRecentWinner() public view returns (address) {\\r\\n        return s_recentWinner;\\r\\n    }\\r\\n\\r\\n    function getRaffleState() public view returns (RaffleState) {\\r\\n        return s_raffleState;\\r\\n    }\\r\\n\\r\\n    function getNumWords() public pure returns (uint256) {\\r\\n        return NUM_WORDS;\\r\\n    }\\r\\n\\r\\n    function getNumPlayers() public view returns (uint256) {\\r\\n        return s_players.length;\\r\\n    }\\r\\n\\r\\n    function getLatestTimeStamp() public view returns (uint256) {\\r\\n        return s_lastTimeStamp;\\r\\n    }\\r\\n\\r\\n    function getRequestConfirmations() public pure returns (uint256) {\\r\\n        return REQUEST_CONFIRMATIONS;\\r\\n    }\\r\\n\\r\\n    function getInterval() public view returns (uint256) {\\r\\n        return i_interval;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x2153df8b28aae121c358fb48a540c55308bf30a34c9d4b5abaa768fdc891aabb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200182438038062001824833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508167ffffffffffffffff166101008167ffffffffffffffff16815250508260a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508063ffffffff166101208163ffffffff16815250506000600160146101000a81548160ff021916908360018111156200010d576200010c62000330565b5b0217905550426002819055508461014081815250505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b6000819050919050565b620001e881620001d3565b8114620001f457600080fd5b50565b6000815190506200020881620001dd565b92915050565b600067ffffffffffffffff82169050919050565b6200022d816200020e565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a01620001f7565b9450506060620002fd89828a01620001bc565b93505060806200031089828a016200023c565b92505060a06200032389828a016200027d565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e051610100516101205161014051611455620003cf600039600081816107f30152610861015260006106a50152600061068201526000610661015260006106250152600081816102fa01526103f7015260008181610337015261038b01526114556000f3fe6080604052600436106100c25760003560e01c8063473f1ddc1161007f5780635f1b0fd8116100595780635f1b0fd8146102255780636e04ff0d1461025057806391ad27b41461028e578063e55ae4e8146102b9576100c2565b8063473f1ddc146101a457806353a2c19a146101cf57806355c9e926146101fa576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc53914610146578063320229eb146101505780634585e33b1461017b575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610bdf565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190610c71565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610e25565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b50610165610564565b6040516101729190610bdf565b60405180910390f35b34801561018757600080fd5b506101a2600480360381019061019d9190610edc565b61056e565b005b3480156101b057600080fd5b506101b961075e565b6040516101c69190610f6a565b60405180910390f35b3480156101db57600080fd5b506101e4610788565b6040516101f19190610bdf565b60405180910390f35b34801561020657600080fd5b5061020f610797565b60405161021c9190610bdf565b60405180910390f35b34801561023157600080fd5b5061023a6107a3565b6040516102479190610bdf565b60405180910390f35b34801561025c57600080fd5b506102776004803603810190610272919061103a565b6107b0565b60405161028592919061111d565b60405180910390f35b34801561029a57600080fd5b506102a361085d565b6040516102b09190610bdf565b60405180910390f35b3480156102c557600080fd5b506102e060048036038101906102db919061114d565b610885565b6040516102ed9190610f6a565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de92919061117a565b60405180910390fd5b6103f182826108cc565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561044f576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561046357610462610bfa565b5b600160149054906101000a900460ff16600181111561048557610484610bfa565b5b146104bc576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b6000610588604051806020016040528060008152506107b0565b509050806105f75747600080549050600160149054906101000a900460ff1660018111156105b9576105b8610bfa565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016105ee939291906111a3565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561061c5761061b610bfa565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106e6959493929190611252565b6020604051808303816000875af1158015610705573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072991906112ba565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b60008080549050905090565b6000600361ffff16905090565b600060606000600160149054906101000a900460ff1660018111156107d8576107d7610bfa565b5b600060018111156107ec576107eb610bfa565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426108209190611316565b119050600080600080549050119050600080471190508380156108405750825b80156108495750815b80156108525750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080828154811061089a5761089961134a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050826000815181106108e7576108e661134a565b5b60200260200101516108f991906113a8565b905060008082815481106109105761090f61134a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff16476040516109a49061140a565b60006040518083038185875af1925050503d80600081146109e1576040519150601f19603f3d011682016040523d82523d6000602084013e6109e6565b606091505b5050905080610a21576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600067ffffffffffffffff811115610a3c57610a3b610ce2565b5b604051908082528060200260200182016040528015610a6a5781602001602082028036833780820191505090505b5060009080519060200190610a80929190610b1f565b50426002819055506000600160146101000a81548160ff02191690836001811115610aae57610aad610bfa565b5b0217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b98579160200282015b82811115610b975782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b3f565b5b509050610ba59190610ba9565b5090565b5b80821115610bc2576000816000905550600101610baa565b5090565b6000819050919050565b610bd981610bc6565b82525050565b6000602082019050610bf46000830184610bd0565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c3a57610c39610bfa565b5b50565b6000819050610c4b82610c29565b919050565b6000610c5b82610c3d565b9050919050565b610c6b81610c50565b82525050565b6000602082019050610c866000830184610c62565b92915050565b6000604051905090565b600080fd5b600080fd5b610ca981610bc6565b8114610cb457600080fd5b50565b600081359050610cc681610ca0565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d1a82610cd1565b810181811067ffffffffffffffff82111715610d3957610d38610ce2565b5b80604052505050565b6000610d4c610c8c565b9050610d588282610d11565b919050565b600067ffffffffffffffff821115610d7857610d77610ce2565b5b602082029050602081019050919050565b600080fd5b6000610da1610d9c84610d5d565b610d42565b90508083825260208201905060208402830185811115610dc457610dc3610d89565b5b835b81811015610ded5780610dd98882610cb7565b845260208401935050602081019050610dc6565b5050509392505050565b600082601f830112610e0c57610e0b610ccc565b5b8135610e1c848260208601610d8e565b91505092915050565b60008060408385031215610e3c57610e3b610c96565b5b6000610e4a85828601610cb7565b925050602083013567ffffffffffffffff811115610e6b57610e6a610c9b565b5b610e7785828601610df7565b9150509250929050565b600080fd5b60008083601f840112610e9c57610e9b610ccc565b5b8235905067ffffffffffffffff811115610eb957610eb8610e81565b5b602083019150836001820283011115610ed557610ed4610d89565b5b9250929050565b60008060208385031215610ef357610ef2610c96565b5b600083013567ffffffffffffffff811115610f1157610f10610c9b565b5b610f1d85828601610e86565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f5482610f29565b9050919050565b610f6481610f49565b82525050565b6000602082019050610f7f6000830184610f5b565b92915050565b600080fd5b600067ffffffffffffffff821115610fa557610fa4610ce2565b5b610fae82610cd1565b9050602081019050919050565b82818337600083830152505050565b6000610fdd610fd884610f8a565b610d42565b905082815260208101848484011115610ff957610ff8610f85565b5b611004848285610fbb565b509392505050565b600082601f83011261102157611020610ccc565b5b8135611031848260208601610fca565b91505092915050565b6000602082840312156110505761104f610c96565b5b600082013567ffffffffffffffff81111561106e5761106d610c9b565b5b61107a8482850161100c565b91505092915050565b60008115159050919050565b61109881611083565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110d85780820151818401526020810190506110bd565b60008484015250505050565b60006110ef8261109e565b6110f981856110a9565b93506111098185602086016110ba565b61111281610cd1565b840191505092915050565b6000604082019050611132600083018561108f565b818103602083015261114481846110e4565b90509392505050565b60006020828403121561116357611162610c96565b5b600061117184828501610cb7565b91505092915050565b600060408201905061118f6000830185610f5b565b61119c6020830184610f5b565b9392505050565b60006060820190506111b86000830186610bd0565b6111c56020830185610bd0565b6111d26040830184610bd0565b949350505050565b6000819050919050565b6111ed816111da565b82525050565b600067ffffffffffffffff82169050919050565b611210816111f3565b82525050565b600061ffff82169050919050565b61122d81611216565b82525050565b600063ffffffff82169050919050565b61124c81611233565b82525050565b600060a08201905061126760008301886111e4565b6112746020830187611207565b6112816040830186611224565b61128e6060830185611243565b61129b6080830184611243565b9695505050505050565b6000815190506112b481610ca0565b92915050565b6000602082840312156112d0576112cf610c96565b5b60006112de848285016112a5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061132182610bc6565b915061132c83610bc6565b9250828203905081811115611344576113436112e7565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113b382610bc6565b91506113be83610bc6565b9250826113ce576113cd611379565b5b828206905092915050565b600081905092915050565b50565b60006113f46000836113d9565b91506113ff826113e4565b600082019050919050565b6000611415826113e7565b915081905091905056fea2646970667358221220fa26cc6c530f079d94af6fca66352df6ab6ea31adae3628d1583cc1538ddb2a364736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c8063473f1ddc1161007f5780635f1b0fd8116100595780635f1b0fd8146102255780636e04ff0d1461025057806391ad27b41461028e578063e55ae4e8146102b9576100c2565b8063473f1ddc146101a457806353a2c19a146101cf57806355c9e926146101fa576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc53914610146578063320229eb146101505780634585e33b1461017b575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610bdf565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190610c71565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610e25565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b50610165610564565b6040516101729190610bdf565b60405180910390f35b34801561018757600080fd5b506101a2600480360381019061019d9190610edc565b61056e565b005b3480156101b057600080fd5b506101b961075e565b6040516101c69190610f6a565b60405180910390f35b3480156101db57600080fd5b506101e4610788565b6040516101f19190610bdf565b60405180910390f35b34801561020657600080fd5b5061020f610797565b60405161021c9190610bdf565b60405180910390f35b34801561023157600080fd5b5061023a6107a3565b6040516102479190610bdf565b60405180910390f35b34801561025c57600080fd5b506102776004803603810190610272919061103a565b6107b0565b60405161028592919061111d565b60405180910390f35b34801561029a57600080fd5b506102a361085d565b6040516102b09190610bdf565b60405180910390f35b3480156102c557600080fd5b506102e060048036038101906102db919061114d565b610885565b6040516102ed9190610f6a565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de92919061117a565b60405180910390fd5b6103f182826108cc565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561044f576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561046357610462610bfa565b5b600160149054906101000a900460ff16600181111561048557610484610bfa565b5b146104bc576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b6000610588604051806020016040528060008152506107b0565b509050806105f75747600080549050600160149054906101000a900460ff1660018111156105b9576105b8610bfa565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016105ee939291906111a3565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561061c5761061b610bfa565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106e6959493929190611252565b6020604051808303816000875af1158015610705573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072991906112ba565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b60008080549050905090565b6000600361ffff16905090565b600060606000600160149054906101000a900460ff1660018111156107d8576107d7610bfa565b5b600060018111156107ec576107eb610bfa565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426108209190611316565b119050600080600080549050119050600080471190508380156108405750825b80156108495750815b80156108525750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080828154811061089a5761089961134a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050826000815181106108e7576108e661134a565b5b60200260200101516108f991906113a8565b905060008082815481106109105761090f61134a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff16476040516109a49061140a565b60006040518083038185875af1925050503d80600081146109e1576040519150601f19603f3d011682016040523d82523d6000602084013e6109e6565b606091505b5050905080610a21576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600067ffffffffffffffff811115610a3c57610a3b610ce2565b5b604051908082528060200260200182016040528015610a6a5781602001602082028036833780820191505090505b5060009080519060200190610a80929190610b1f565b50426002819055506000600160146101000a81548160ff02191690836001811115610aae57610aad610bfa565b5b0217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b98579160200282015b82811115610b975782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b3f565b5b509050610ba59190610ba9565b5090565b5b80821115610bc2576000816000905550600101610baa565b5090565b6000819050919050565b610bd981610bc6565b82525050565b6000602082019050610bf46000830184610bd0565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c3a57610c39610bfa565b5b50565b6000819050610c4b82610c29565b919050565b6000610c5b82610c3d565b9050919050565b610c6b81610c50565b82525050565b6000602082019050610c866000830184610c62565b92915050565b6000604051905090565b600080fd5b600080fd5b610ca981610bc6565b8114610cb457600080fd5b50565b600081359050610cc681610ca0565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d1a82610cd1565b810181811067ffffffffffffffff82111715610d3957610d38610ce2565b5b80604052505050565b6000610d4c610c8c565b9050610d588282610d11565b919050565b600067ffffffffffffffff821115610d7857610d77610ce2565b5b602082029050602081019050919050565b600080fd5b6000610da1610d9c84610d5d565b610d42565b90508083825260208201905060208402830185811115610dc457610dc3610d89565b5b835b81811015610ded5780610dd98882610cb7565b845260208401935050602081019050610dc6565b5050509392505050565b600082601f830112610e0c57610e0b610ccc565b5b8135610e1c848260208601610d8e565b91505092915050565b60008060408385031215610e3c57610e3b610c96565b5b6000610e4a85828601610cb7565b925050602083013567ffffffffffffffff811115610e6b57610e6a610c9b565b5b610e7785828601610df7565b9150509250929050565b600080fd5b60008083601f840112610e9c57610e9b610ccc565b5b8235905067ffffffffffffffff811115610eb957610eb8610e81565b5b602083019150836001820283011115610ed557610ed4610d89565b5b9250929050565b60008060208385031215610ef357610ef2610c96565b5b600083013567ffffffffffffffff811115610f1157610f10610c9b565b5b610f1d85828601610e86565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f5482610f29565b9050919050565b610f6481610f49565b82525050565b6000602082019050610f7f6000830184610f5b565b92915050565b600080fd5b600067ffffffffffffffff821115610fa557610fa4610ce2565b5b610fae82610cd1565b9050602081019050919050565b82818337600083830152505050565b6000610fdd610fd884610f8a565b610d42565b905082815260208101848484011115610ff957610ff8610f85565b5b611004848285610fbb565b509392505050565b600082601f83011261102157611020610ccc565b5b8135611031848260208601610fca565b91505092915050565b6000602082840312156110505761104f610c96565b5b600082013567ffffffffffffffff81111561106e5761106d610c9b565b5b61107a8482850161100c565b91505092915050565b60008115159050919050565b61109881611083565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110d85780820151818401526020810190506110bd565b60008484015250505050565b60006110ef8261109e565b6110f981856110a9565b93506111098185602086016110ba565b61111281610cd1565b840191505092915050565b6000604082019050611132600083018561108f565b818103602083015261114481846110e4565b90509392505050565b60006020828403121561116357611162610c96565b5b600061117184828501610cb7565b91505092915050565b600060408201905061118f6000830185610f5b565b61119c6020830184610f5b565b9392505050565b60006060820190506111b86000830186610bd0565b6111c56020830185610bd0565b6111d26040830184610bd0565b949350505050565b6000819050919050565b6111ed816111da565b82525050565b600067ffffffffffffffff82169050919050565b611210816111f3565b82525050565b600061ffff82169050919050565b61122d81611216565b82525050565b600063ffffffff82169050919050565b61124c81611233565b82525050565b600060a08201905061126760008301886111e4565b6112746020830187611207565b6112816040830186611224565b61128e6060830185611243565b61129b6080830184611243565b9695505050505050565b6000815190506112b481610ca0565b92915050565b6000602082840312156112d0576112cf610c96565b5b60006112de848285016112a5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061132182610bc6565b915061132c83610bc6565b9250828203905081811115611344576113436112e7565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113b382610bc6565b91506113be83610bc6565b9250826113ce576113cd611379565b5b828206905092915050565b600081905092915050565b50565b60006113f46000836113d9565b91506113ff826113e4565b600082019050919050565b6000611415826113e7565b915081905091905056fea2646970667358221220fa26cc6c530f079d94af6fca66352df6ab6ea31adae3628d1583cc1538ddb2a364736f6c63430008180033",
  "devdoc": {
    "author": "itsskofficial",
    "details": "This contract uses the Chainlink VRF for random number generation.",
    "kind": "dev",
    "methods": {},
    "title": "A raffle contract that allows players to enter by paying a fee, and then picks a winner randomly.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract relies on the Chainlink VRF Coordinator to get random numbers.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 207,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 224,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 227,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)202"
      },
      {
        "astId": 229,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)202": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}