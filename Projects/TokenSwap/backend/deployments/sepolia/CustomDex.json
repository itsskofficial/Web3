{
  "address": "0x525B9d5BD8D778eDFB2128834305d8a89582d533",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CustomDex__InsufficientFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "getEthBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        }
      ],
      "name": "getTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        }
      ],
      "name": "getTokenName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        }
      ],
      "name": "getTokenSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTransactionHistory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenA",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "tokenB",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "inputValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "outputValue",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            }
          ],
          "internalType": "struct CustomDex.Transaction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        }
      ],
      "name": "swapEthToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "swapTokenToEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenA",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenB",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "swapTokenToToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenNames",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenSymbols",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "tokenToInstance",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transactionIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x01e04e082918d6f0f9189f8fde04d91c0d26876bc21fd5d3f086b350778439c4",
  "receipt": {
    "to": null,
    "from": "0x18f6D5C9b2eF0105250cf5173f46b1d472934885",
    "contractAddress": "0x525B9d5BD8D778eDFB2128834305d8a89582d533",
    "transactionIndex": 51,
    "gasUsed": "9281490",
    "logsBloom": "0x000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000004000200000000000000000000000000000000000000000000000000080000000000000000c000000000001000000000000000000002000000000000000000080010000000000000040100001000000000000100000000000000400000000008000000000000000400000000080000000a000000000000000000000040000040000000000002000000000000000000000000000002000000000000000000000000080000000001000000000000100820010400000000000000000000000000002000000000000008000000000000000000",
    "blockHash": "0x7491dd1d1845148eb3d776af68f5b678c960bad36ad21310624c6bb02c0358e3",
    "transactionHash": "0x01e04e082918d6f0f9189f8fde04d91c0d26876bc21fd5d3f086b350778439c4",
    "logs": [
      {
        "transactionIndex": 51,
        "blockNumber": 6330270,
        "transactionHash": "0x01e04e082918d6f0f9189f8fde04d91c0d26876bc21fd5d3f086b350778439c4",
        "address": "0x616592991f051800e67D9A5905984A9278BC0F32",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000525b9d5bd8d778edfb2128834305d8a89582d533"
        ],
        "data": "0x00000000000000000000000000000000000000000000d3c21bcecceda1000000",
        "logIndex": 87,
        "blockHash": "0x7491dd1d1845148eb3d776af68f5b678c960bad36ad21310624c6bb02c0358e3"
      },
      {
        "transactionIndex": 51,
        "blockNumber": 6330270,
        "transactionHash": "0x01e04e082918d6f0f9189f8fde04d91c0d26876bc21fd5d3f086b350778439c4",
        "address": "0xED9f1d87AF221EB3711F87E08Cdd962FC8E0e034",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000525b9d5bd8d778edfb2128834305d8a89582d533"
        ],
        "data": "0x00000000000000000000000000000000000000000000d3c21bcecceda1000000",
        "logIndex": 88,
        "blockHash": "0x7491dd1d1845148eb3d776af68f5b678c960bad36ad21310624c6bb02c0358e3"
      },
      {
        "transactionIndex": 51,
        "blockNumber": 6330270,
        "transactionHash": "0x01e04e082918d6f0f9189f8fde04d91c0d26876bc21fd5d3f086b350778439c4",
        "address": "0xc2111c6Cf34Ba59ee45f7d68EBa5980b5E1A5d2e",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000525b9d5bd8d778edfb2128834305d8a89582d533"
        ],
        "data": "0x00000000000000000000000000000000000000000000d3c21bcecceda1000000",
        "logIndex": 89,
        "blockHash": "0x7491dd1d1845148eb3d776af68f5b678c960bad36ad21310624c6bb02c0358e3"
      },
      {
        "transactionIndex": 51,
        "blockNumber": 6330270,
        "transactionHash": "0x01e04e082918d6f0f9189f8fde04d91c0d26876bc21fd5d3f086b350778439c4",
        "address": "0x92246824C8f24243f400aFb11B99349F24883bfa",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000525b9d5bd8d778edfb2128834305d8a89582d533"
        ],
        "data": "0x00000000000000000000000000000000000000000000d3c21bcecceda1000000",
        "logIndex": 90,
        "blockHash": "0x7491dd1d1845148eb3d776af68f5b678c960bad36ad21310624c6bb02c0358e3"
      },
      {
        "transactionIndex": 51,
        "blockNumber": 6330270,
        "transactionHash": "0x01e04e082918d6f0f9189f8fde04d91c0d26876bc21fd5d3f086b350778439c4",
        "address": "0x7700d692FDd1cefB961F0bf343A070730EE33fd2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000525b9d5bd8d778edfb2128834305d8a89582d533"
        ],
        "data": "0x00000000000000000000000000000000000000000000d3c21bcecceda1000000",
        "logIndex": 91,
        "blockHash": "0x7491dd1d1845148eb3d776af68f5b678c960bad36ad21310624c6bb02c0358e3"
      },
      {
        "transactionIndex": 51,
        "blockNumber": 6330270,
        "transactionHash": "0x01e04e082918d6f0f9189f8fde04d91c0d26876bc21fd5d3f086b350778439c4",
        "address": "0xF5d14Fd69567687428f89E7A42D091aa45eA52F4",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000525b9d5bd8d778edfb2128834305d8a89582d533"
        ],
        "data": "0x00000000000000000000000000000000000000000000d3c21bcecceda1000000",
        "logIndex": 92,
        "blockHash": "0x7491dd1d1845148eb3d776af68f5b678c960bad36ad21310624c6bb02c0358e3"
      },
      {
        "transactionIndex": 51,
        "blockNumber": 6330270,
        "transactionHash": "0x01e04e082918d6f0f9189f8fde04d91c0d26876bc21fd5d3f086b350778439c4",
        "address": "0x9b863CDdB2a504dC079f808CF8e9ea4aE734E412",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000525b9d5bd8d778edfb2128834305d8a89582d533"
        ],
        "data": "0x00000000000000000000000000000000000000000000d3c21bcecceda1000000",
        "logIndex": 93,
        "blockHash": "0x7491dd1d1845148eb3d776af68f5b678c960bad36ad21310624c6bb02c0358e3"
      },
      {
        "transactionIndex": 51,
        "blockNumber": 6330270,
        "transactionHash": "0x01e04e082918d6f0f9189f8fde04d91c0d26876bc21fd5d3f086b350778439c4",
        "address": "0x1bBD0d5f03B61f2d126cAcDA896a3e8ba9173295",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000525b9d5bd8d778edfb2128834305d8a89582d533"
        ],
        "data": "0x00000000000000000000000000000000000000000000d3c21bcecceda1000000",
        "logIndex": 94,
        "blockHash": "0x7491dd1d1845148eb3d776af68f5b678c960bad36ad21310624c6bb02c0358e3"
      }
    ],
    "blockNumber": 6330270,
    "cumulativeGasUsed": "15874731",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9647382d4396a01246c8d3064a4fce2b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CustomDex__InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"name\":\"getTokenName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"name\":\"getTokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransactionHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"inputValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"internalType\":\"struct CustomDex.Transaction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"name\":\"swapEthToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapTokenToEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapTokenToToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSymbols\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"tokenToInstance\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CustomDex.sol\":\"CustomDex\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/CustomDex.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12 <0.9.0;\\r\\n\\r\\nimport \\\"./CustomToken.sol\\\";\\r\\n\\r\\nerror CustomDex__InsufficientFunds();\\r\\n\\r\\ncontract CustomDex {\\r\\n    string[] public tokenNames = [\\\"Tether USD\\\", \\\"Binance Coin\\\", \\\"USD Coin\\\", \\\"Tron\\\", \\\"Matic\\\", \\\"Ethereum\\\", \\\"Bitcoin\\\", \\\"Polkadot\\\"];\\r\\n    string[] public tokenSymbols = [\\\"USDT\\\", \\\"BNB\\\", \\\"USDC\\\", \\\"TRX\\\", \\\"MATIC\\\", \\\"ETH\\\", \\\"BTC\\\", \\\"DOT\\\"];\\r\\n    mapping (string => ERC20) public tokenToInstance;\\r\\n    uint256 ethValue = 1000000000000000000;\\r\\n\\r\\n    struct Transaction {\\r\\n        uint256 id;\\r\\n        string tokenA;\\r\\n        string tokenB;\\r\\n        uint256 inputValue;\\r\\n        uint256 outputValue;\\r\\n        address user;\\r\\n    }\\r\\n\\r\\n    uint256 public transactionIndex;\\r\\n    mapping (uint256 => Transaction) private transactionHistory;\\r\\n\\r\\n    constructor() {\\r\\n        for (uint256 i = 0; i < tokenNames.length; i++) {\\r\\n            CustomToken token = new CustomToken(tokenNames[i], tokenSymbols[i]);\\r\\n            tokenToInstance[tokenSymbols[i]] = token;\\r\\n        }\\r\\n    }\\r\\n\\r\\n     function createTransaction(string memory tokenA, string memory tokenB, uint256 inputValue, uint256 outputValue) internal {\\r\\n        transactionIndex++;\\r\\n        uint256 id = transactionIndex;\\r\\n        Transaction storage transaction = transactionHistory[id];\\r\\n        transaction.id = id;\\r\\n        transaction.tokenA = tokenA;\\r\\n        transaction.tokenB = tokenB;\\r\\n        transaction.inputValue = inputValue;\\r\\n        transaction.outputValue = outputValue;\\r\\n        transaction.user = msg.sender;\\r\\n        transactionHistory[id] = transaction;\\r\\n    }\\r\\n\\r\\n    function swapEthToToken(string memory tokenSymbol) public payable returns (uint256) {\\r\\n        uint256 inputValue = msg.value;\\r\\n        uint256 outputValue = (inputValue / ethValue) * 1000000000000000000;\\r\\n        require(tokenToInstance[tokenSymbol].transfer(msg.sender, outputValue), \\\"Transfer failed\\\");\\r\\n\\r\\n        string memory etherTokenSymbol = \\\"ETH\\\";\\r\\n        createTransaction(tokenSymbol, etherTokenSymbol, inputValue, outputValue);\\r\\n        return outputValue;\\r\\n    }\\r\\n\\r\\n    function swapTokenToEth(string memory tokenSymbol, uint256 amount) public returns (uint256) {\\r\\n        uint256 inputValue = amount / 1000000000000000000;\\r\\n        uint256 outputValue = inputValue * ethValue;\\r\\n\\r\\n        if (address(this).balance >= outputValue) {\\r\\n            revert CustomDex__InsufficientFunds();\\r\\n        }\\r\\n\\r\\n        payable(msg.sender).transfer(outputValue);\\r\\n        require(tokenToInstance[tokenSymbol].transferFrom(msg.sender, address(this), amount), \\\"Transfer failed\\\");\\r\\n\\r\\n        string memory ethTokenSymbol = \\\"ETH\\\";\\r\\n        createTransaction(tokenSymbol, ethTokenSymbol, inputValue, outputValue);\\r\\n        return outputValue;\\r\\n    }\\r\\n\\r\\n    function swapTokenToToken(string memory tokenA, string memory tokenB, uint256 amount) public {\\r\\n        require(tokenToInstance[tokenA].transferFrom(msg.sender, address(this), amount), \\\"Transfer failed\\\");\\r\\n        require(tokenToInstance[tokenB].transfer(msg.sender, amount), \\\"Transfer failed\\\");\\r\\n\\r\\n        createTransaction(tokenA, tokenB, amount, amount);\\r\\n    }\\r\\n\\r\\n    function getTokenBalance(string memory tokenSymbol, address user) public view returns (uint256) {\\r\\n            return tokenToInstance[tokenSymbol].balanceOf(user);\\r\\n    }\\r\\n\\r\\n    function getTokenSupply(string memory tokenSymbol) public view returns (uint256) {\\r\\n        return tokenToInstance[tokenSymbol].totalSupply();\\r\\n    }\\r\\n\\r\\n    function getTokenName(string memory tokenSymbol) public view returns (string memory) {\\r\\n        return tokenToInstance[tokenSymbol].name();\\r\\n    }\\r\\n\\r\\n    function getTokenAddress(string memory tokenSymbol) public view returns (address) {\\r\\n        return address(tokenToInstance[tokenSymbol]);\\r\\n    }\\r\\n\\r\\n    function getEthBalance() public view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function getTransactionHistory() public view returns (Transaction[] memory) {\\r\\n        uint256 totalTransactions = transactionIndex;\\r\\n        Transaction[] memory transactions = new Transaction[](totalTransactions);\\r\\n        for (uint256 i = 0; i < totalTransactions; i++) {\\r\\n            transactions[i] = transactionHistory[i];\\r\\n        }\\r\\n        return transactions;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x198f852e180c69f0c25dfcb0d39f7bb0623529af9664f15e05c94b658b6e5d05\",\"license\":\"MIT\"},\"contracts/CustomToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract CustomToken is ERC20 {\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\\n        _mint(msg.sender, 1000000000000000000000000);\\n    }\\n}\\n\",\"keccak256\":\"0x6a39599ba5f3b88f7bfb17d384a2bf447123aece4abb70c649850cae6e02abbd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100c1575f3560e01c80638cd93e8c1161007e578063b8220f6a11610058578063b8220f6a146102b1578063bf015aae146102db578063c409123614610303578063db6f63ee1461033f576100c1565b80638cd93e8c1461020f578063a0776a591461024b578063b76d4fc314610287576100c1565b8063310495ab146100c55780633cdb9762146101015780635f88c7181461013d57806363fcf7c5146101795780636e7ddea8146101a957806370ed0ada146101e5575b5f80fd5b3480156100d0575f80fd5b506100eb60048036038101906100e69190611138565b61037b565b6040516100f891906111ed565b60405180910390f35b34801561010c575f80fd5b5061012760048036038101906101229190611393565b610420565b60405161013491906113fc565b60405180910390f35b348015610148575f80fd5b50610163600480360381019061015e9190611415565b6104de565b60405161017091906114b7565b60405180910390f35b610193600480360381019061018e9190611415565b610526565b6040516101a091906113fc565b60405180910390f35b3480156101b4575f80fd5b506101cf60048036038101906101ca9190611138565b610696565b6040516101dc91906111ed565b60405180910390f35b3480156101f0575f80fd5b506101f961073c565b60405161020691906113fc565b60405180910390f35b34801561021a575f80fd5b5061023560048036038101906102309190611415565b610743565b60405161024291906111ed565b60405180910390f35b348015610256575f80fd5b50610271600480360381019061026c9190611415565b6107f9565b60405161027e91906113fc565b60405180910390f35b348015610292575f80fd5b5061029b6108ab565b6040516102a8919061167e565b60405180910390f35b3480156102bc575f80fd5b506102c5610af6565b6040516102d291906113fc565b60405180910390f35b3480156102e6575f80fd5b5061030160048036038101906102fc919061169e565b610afc565b005b34801561030e575f80fd5b5061032960048036038101906103249190611415565b610cfd565b6040516103369190611735565b60405180910390f35b34801561034a575f80fd5b506103656004803603810190610360919061174e565b610d43565b60405161037291906113fc565b60405180910390f35b5f8181548110610389575f80fd5b905f5260205f20015f9150905080546103a1906117d5565b80601f01602080910402602001604051908101604052809291908181526020018280546103cd906117d5565b80156104185780601f106103ef57610100808354040283529160200191610418565b820191905f5260205f20905b8154815290600101906020018083116103fb57829003601f168201915b505050505081565b5f600283604051610431919061183f565b90815260200160405180910390205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016104979190611735565b602060405180830381865afa1580156104b2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104d69190611869565b905092915050565b6002818051602081018201805184825260208301602085012081835280955050505050505f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f803490505f670de0b6b3a76400006003548361054391906118ee565b61054d919061191e565b905060028460405161055f919061183f565b90815260200160405180910390205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016105c792919061195f565b6020604051808303815f875af11580156105e3573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061060791906119bb565b610646576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063d90611a30565b60405180910390fd5b5f6040518060400160405280600381526020017f4554480000000000000000000000000000000000000000000000000000000000815250905061068b85828585610f33565b819350505050919050565b600181815481106106a5575f80fd5b905f5260205f20015f9150905080546106bd906117d5565b80601f01602080910402602001604051908101604052809291908181526020018280546106e9906117d5565b80156107345780601f1061070b57610100808354040283529160200191610734565b820191905f5260205f20905b81548152906001019060200180831161071757829003601f168201915b505050505081565b5f47905090565b6060600282604051610755919061183f565b90815260200160405180910390205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa1580156107ca573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906107f29190611abc565b9050919050565b5f60028260405161080a919061183f565b90815260200160405180910390205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610880573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108a49190611869565b9050919050565b60605f60045490505f8167ffffffffffffffff8111156108ce576108cd611215565b5b60405190808252806020026020018201604052801561090757816020015b6108f46110ac565b8152602001906001900390816108ec5790505b5090505f5b82811015610aed5760055f8281526020019081526020015f206040518060c00160405290815f8201548152602001600182018054610949906117d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610975906117d5565b80156109c05780601f10610997576101008083540402835291602001916109c0565b820191905f5260205f20905b8154815290600101906020018083116109a357829003601f168201915b505050505081526020016002820180546109d9906117d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610a05906117d5565b8015610a505780601f10610a2757610100808354040283529160200191610a50565b820191905f5260205f20905b815481529060010190602001808311610a3357829003601f168201915b505050505081526020016003820154815260200160048201548152602001600582015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050828281518110610ad557610ad4611b03565b5b6020026020010181905250808060010191505061090c565b50809250505090565b60045481565b600283604051610b0c919061183f565b90815260200160405180910390205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610b7693929190611b30565b6020604051808303815f875af1158015610b92573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610bb691906119bb565b610bf5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bec90611a30565b60405180910390fd5b600282604051610c05919061183f565b90815260200160405180910390205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610c6d92919061195f565b6020604051808303815f875af1158015610c89573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cad91906119bb565b610cec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce390611a30565b60405180910390fd5b610cf883838384610f33565b505050565b5f600282604051610d0e919061183f565b90815260200160405180910390205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f80670de0b6b3a764000083610d5991906118ee565b90505f60035482610d6a919061191e565b9050804710610da5576040517f2f1ed4f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f19350505050158015610de8573d5f803e3d5ffd5b50600285604051610df9919061183f565b90815260200160405180910390205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b8152600401610e6393929190611b30565b6020604051808303815f875af1158015610e7f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ea391906119bb565b610ee2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed990611a30565b60405180910390fd5b5f6040518060400160405280600381526020017f45544800000000000000000000000000000000000000000000000000000000008152509050610f2786828585610f33565b81935050505092915050565b60045f815480929190610f4590611b65565b91905055505f60045490505f60055f8381526020019081526020015f20905081815f018190555085816001019081610f7d9190611d40565b5084816002019081610f8f9190611d40565b5083816003018190555082816004018190555033816005015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060055f8481526020019081526020015f205f820154815f0155600182018160010190816110129190611e24565b50600282018160020190816110279190611e24565b506003820154816003015560048201548160040155600582015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816005015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050505050505050565b6040518060c001604052805f815260200160608152602001606081526020015f81526020015f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681525090565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b61111781611105565b8114611121575f80fd5b50565b5f813590506111328161110e565b92915050565b5f6020828403121561114d5761114c6110fd565b5b5f61115a84828501611124565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561119a57808201518184015260208101905061117f565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6111bf82611163565b6111c9818561116d565b93506111d981856020860161117d565b6111e2816111a5565b840191505092915050565b5f6020820190508181035f83015261120581846111b5565b905092915050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61124b826111a5565b810181811067ffffffffffffffff8211171561126a57611269611215565b5b80604052505050565b5f61127c6110f4565b90506112888282611242565b919050565b5f67ffffffffffffffff8211156112a7576112a6611215565b5b6112b0826111a5565b9050602081019050919050565b828183375f83830152505050565b5f6112dd6112d88461128d565b611273565b9050828152602081018484840111156112f9576112f8611211565b5b6113048482856112bd565b509392505050565b5f82601f8301126113205761131f61120d565b5b81356113308482602086016112cb565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61136282611339565b9050919050565b61137281611358565b811461137c575f80fd5b50565b5f8135905061138d81611369565b92915050565b5f80604083850312156113a9576113a86110fd565b5b5f83013567ffffffffffffffff8111156113c6576113c5611101565b5b6113d28582860161130c565b92505060206113e38582860161137f565b9150509250929050565b6113f681611105565b82525050565b5f60208201905061140f5f8301846113ed565b92915050565b5f6020828403121561142a576114296110fd565b5b5f82013567ffffffffffffffff81111561144757611446611101565b5b6114538482850161130c565b91505092915050565b5f819050919050565b5f61147f61147a61147584611339565b61145c565b611339565b9050919050565b5f61149082611465565b9050919050565b5f6114a182611486565b9050919050565b6114b181611497565b82525050565b5f6020820190506114ca5f8301846114a8565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61150281611105565b82525050565b5f82825260208201905092915050565b5f61152282611163565b61152c8185611508565b935061153c81856020860161117d565b611545816111a5565b840191505092915050565b61155981611358565b82525050565b5f60c083015f8301516115745f8601826114f9565b506020830151848203602086015261158c8282611518565b915050604083015184820360408601526115a68282611518565b91505060608301516115bb60608601826114f9565b5060808301516115ce60808601826114f9565b5060a08301516115e160a0860182611550565b508091505092915050565b5f6115f7838361155f565b905092915050565b5f602082019050919050565b5f611615826114d0565b61161f81856114da565b935083602082028501611631856114ea565b805f5b8581101561166c578484038952815161164d85826115ec565b9450611658836115ff565b925060208a01995050600181019050611634565b50829750879550505050505092915050565b5f6020820190508181035f830152611696818461160b565b905092915050565b5f805f606084860312156116b5576116b46110fd565b5b5f84013567ffffffffffffffff8111156116d2576116d1611101565b5b6116de8682870161130c565b935050602084013567ffffffffffffffff8111156116ff576116fe611101565b5b61170b8682870161130c565b925050604061171c86828701611124565b9150509250925092565b61172f81611358565b82525050565b5f6020820190506117485f830184611726565b92915050565b5f8060408385031215611764576117636110fd565b5b5f83013567ffffffffffffffff81111561178157611780611101565b5b61178d8582860161130c565b925050602061179e85828601611124565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806117ec57607f821691505b6020821081036117ff576117fe6117a8565b5b50919050565b5f81905092915050565b5f61181982611163565b6118238185611805565b935061183381856020860161117d565b80840191505092915050565b5f61184a828461180f565b915081905092915050565b5f815190506118638161110e565b92915050565b5f6020828403121561187e5761187d6110fd565b5b5f61188b84828501611855565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6118f882611105565b915061190383611105565b92508261191357611912611894565b5b828204905092915050565b5f61192882611105565b915061193383611105565b925082820261194181611105565b91508282048414831517611958576119576118c1565b5b5092915050565b5f6040820190506119725f830185611726565b61197f60208301846113ed565b9392505050565b5f8115159050919050565b61199a81611986565b81146119a4575f80fd5b50565b5f815190506119b581611991565b92915050565b5f602082840312156119d0576119cf6110fd565b5b5f6119dd848285016119a7565b91505092915050565b7f5472616e73666572206661696c656400000000000000000000000000000000005f82015250565b5f611a1a600f8361116d565b9150611a25826119e6565b602082019050919050565b5f6020820190508181035f830152611a4781611a0e565b9050919050565b5f611a60611a5b8461128d565b611273565b905082815260208101848484011115611a7c57611a7b611211565b5b611a8784828561117d565b509392505050565b5f82601f830112611aa357611aa261120d565b5b8151611ab3848260208601611a4e565b91505092915050565b5f60208284031215611ad157611ad06110fd565b5b5f82015167ffffffffffffffff811115611aee57611aed611101565b5b611afa84828501611a8f565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f606082019050611b435f830186611726565b611b506020830185611726565b611b5d60408301846113ed565b949350505050565b5f611b6f82611105565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611ba157611ba06118c1565b5b600182019050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302611c087fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611bcd565b611c128683611bcd565b95508019841693508086168417925050509392505050565b5f611c44611c3f611c3a84611105565b61145c565b611105565b9050919050565b5f819050919050565b611c5d83611c2a565b611c71611c6982611c4b565b848454611bd9565b825550505050565b5f90565b611c85611c79565b611c90818484611c54565b505050565b5b81811015611cb357611ca85f82611c7d565b600181019050611c96565b5050565b601f821115611cf857611cc981611bac565b611cd284611bbe565b81016020851015611ce1578190505b611cf5611ced85611bbe565b830182611c95565b50505b505050565b5f82821c905092915050565b5f611d185f1984600802611cfd565b1980831691505092915050565b5f611d308383611d09565b9150826002028217905092915050565b611d4982611163565b67ffffffffffffffff811115611d6257611d61611215565b5b611d6c82546117d5565b611d77828285611cb7565b5f60209050601f831160018114611da8575f8415611d96578287015190505b611da08582611d25565b865550611e07565b601f198416611db686611bac565b5f5b82811015611ddd57848901518255600182019150602085019450602081019050611db8565b86831015611dfa5784890151611df6601f891682611d09565b8355505b6001600288020188555050505b505050505050565b5f81549050611e1d816117d5565b9050919050565b818103611e32575050611f07565b611e3b82611e0f565b67ffffffffffffffff811115611e5457611e53611215565b5b611e5e82546117d5565b611e69828285611cb7565b5f601f831160018114611e96575f8415611e84578287015490505b611e8e8582611d25565b865550611f00565b601f198416611ea487611bac565b9650611eaf86611bac565b5f5b82811015611ed657848901548255600182019150600185019450602081019050611eb1565b86831015611ef35784890154611eef601f891682611d09565b8355505b6001600288020188555050505b5050505050505b56fea264697066735822122020c56e56d506eedb9ad76d4304369486fabd4761cb07d81c901c770ab4279bda64736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 802,
        "contract": "contracts/CustomDex.sol:CustomDex",
        "label": "tokenNames",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 814,
        "contract": "contracts/CustomDex.sol:CustomDex",
        "label": "tokenSymbols",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 819,
        "contract": "contracts/CustomDex.sol:CustomDex",
        "label": "tokenToInstance",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_contract(ERC20)651)"
      },
      {
        "astId": 822,
        "contract": "contracts/CustomDex.sol:CustomDex",
        "label": "ethValue",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 837,
        "contract": "contracts/CustomDex.sol:CustomDex",
        "label": "transactionIndex",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 842,
        "contract": "contracts/CustomDex.sol:CustomDex",
        "label": "transactionHistory",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Transaction)835_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_contract(ERC20)651": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_string_memory_ptr,t_contract(ERC20)651)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => contract ERC20)",
        "numberOfBytes": "32",
        "value": "t_contract(ERC20)651"
      },
      "t_mapping(t_uint256,t_struct(Transaction)835_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CustomDex.Transaction)",
        "numberOfBytes": "32",
        "value": "t_struct(Transaction)835_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Transaction)835_storage": {
        "encoding": "inplace",
        "label": "struct CustomDex.Transaction",
        "members": [
          {
            "astId": 824,
            "contract": "contracts/CustomDex.sol:CustomDex",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 826,
            "contract": "contracts/CustomDex.sol:CustomDex",
            "label": "tokenA",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 828,
            "contract": "contracts/CustomDex.sol:CustomDex",
            "label": "tokenB",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 830,
            "contract": "contracts/CustomDex.sol:CustomDex",
            "label": "inputValue",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 832,
            "contract": "contracts/CustomDex.sol:CustomDex",
            "label": "outputValue",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 834,
            "contract": "contracts/CustomDex.sol:CustomDex",
            "label": "user",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}